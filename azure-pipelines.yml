# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Docker compose
  azureSubscription: 'Microsoft Partner Network(15464c5e-dadb-4cbd-a5e5-d6637369c2bf)'
  azureContainerRegistry: '{"loginServer":"channelengine.azurecr.io", "id" : "/subscriptions/15464c5e-dadb-4cbd-a5e5-d6637369c2bf/resourceGroups/Kubernetes/providers/Microsoft.ContainerRegistry/registries/channelengine"}'
  dockerComposeFile: 'docker/docker-compose.yml'
  projectName: $(Build.Repository.Name)

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '2041e0d4-f66b-4731-b515-2c29bb626c4b'
  tag: '$(Build.BuildId)'
  imageRepository: 'docker-poc-web'
  containerRegistry: 'channelengine.azurecr.io'
  imagePullSecret: 'channelengine40638557-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Bash@3
      inputs:
        workingDirectory: config
        filePath: request-cert.sh
    - task: DockerCompose@0
      displayName: Build services
      inputs:
        action: Build services
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: $(azureSubscription)
        azureContainerRegistry: $(azureContainerRegistry)
        dockerComposeFile: $(dockerComposeFile)
        additionalImageTags: $(tag)
        projectName: $(projectName)
    - task: DockerCompose@0
      displayName: Push services
      inputs:
        action: Push services
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: $(azureSubscription)
        azureContainerRegistry: $(azureContainerRegistry)
        dockerComposeFile: $(dockerComposeFile)
        additionalImageTags: $(tag)
        projectName: $(projectName)
    - publish: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'christiaanderidderdockerpoc-2797.docker-poc'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/k8s/**.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

